@CrossOrigin(origins = "http://localhost:3000")
@PutMapping(path = "/updateLicense/{ID}/{amount}/{startDate}/{expirationDate}/{purchaseOrder}/{purchaseOrderOriginally}/{subscriptionPack}")
public @ResponseBody ResponseEntity<String> updateLicenseEntity(
    @PathVariable int ID,
    @PathVariable String amount,
    @PathVariable String startDate,
    @PathVariable String expirationDate,
    @PathVariable String purchaseOrder,
    @PathVariable String purchaseOrderOriginally,
    @PathVariable String subscriptionPack) {

    try {
        // 1. Lizenz suchen
        Optional<LicenseEntity> licenseOptional = licenseRepo.findById(ID);

        if (!licenseOptional.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("License with ID " + ID + " not found.");
        }

        LicenseEntity license = licenseOptional.get();

        // 2. Eingabewerte validieren und parsen
        try {
            license.setAmount(Integer.parseInt(amount));
            license.setStartDate(Date.valueOf(startDate));
            license.setExpirationDate(Date.valueOf(expirationDate));
            license.setPurchaseOrder(Integer.parseInt(purchaseOrder));
            license.setPurchaseOrderOriginally(Integer.parseInt(purchaseOrderOriginally));
            license.setSubscriptionPack(subscriptionPack);
        } catch (NumberFormatException | IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid input format: " + e.getMessage());
        }

        // 3. Lizenz speichern
        licenseRepo.save(license);

        // 4. Erfolgsnachricht
        return ResponseEntity.ok("License updated successfully!");

    } catch (Exception e) {
        // Fehlerprotokollierung und Fehlerantwort
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating license: " + e.getMessage());
    }
}
